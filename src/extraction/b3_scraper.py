import os
import time
import subprocess
import glob
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException

def download_file_colab_fixed():
    """
    Baixa um arquivo do site da B3 usando Google Chrome no Colab,
    converte para Parquet e retorna ambos os caminhos de arquivo
    """
    print("üîß Instalando Google Chrome...")

    # Verificar se o Google Chrome j√° est√° instalado
    chrome_installed = False
    try:
        # Tentar obter a vers√£o do Chrome
        chrome_version = subprocess.check_output(['google-chrome', '--version'], stderr=subprocess.STDOUT)
        print(f"‚úÖ Google Chrome j√° instalado - Vers√£o: {chrome_version.decode().strip()}")
        chrome_installed = True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è Google Chrome n√£o encontrado, procedendo com instala√ß√£o...")
        chrome_installed = False

    # Instalar Google Chrome apenas se necess√°rio
    if not chrome_installed:
        print("üîß Instalando Google Chrome...")
        subprocess.run(['apt-get', 'update'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(['wget', 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'],
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(['dpkg', '-i', 'google-chrome-stable_current_amd64.deb'], 
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(['apt-get', 'install', '-f', '-y'], 
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Verificar se a instala√ß√£o foi bem-sucedida
        try:
            chrome_version = subprocess.check_output(['google-chrome', '--version'])
            print(f"‚úÖ Google Chrome instalado com sucesso - Vers√£o: {chrome_version.decode().strip()}")
        except Exception as e:
            print(f"‚ùå Falha na instala√ß√£o do Google Chrome: {e}")
            raise

    # Configurar op√ß√µes do Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Modo sem interface gr√°fica
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--remote-debugging-port=9222")
    
    # Definir caminho de download
    download_path = "/content/raw_data"
    os.makedirs(download_path, exist_ok=True)
    prefs = {
        "download.default_directory": download_path,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True
    }
    chrome_options.add_experimental_option("prefs", prefs)
    
    print("üöÄ Configurando ChromeDriver...")
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        print("‚úÖ WebDriver inicializado com sucesso.")
    except Exception as e:
        print(f"‚ùå Falha na inicializa√ß√£o do WebDriver: {e}")
        return None, None

    try:
        # --- Navegar at√© a p√°gina ---
        print("üåê Acessando a p√°gina do IBOVESPA da B3...")
        driver.get("https://sistemaswebb3-listados.b3.com.br/indexPage/day/IBOV?language=pt-br")
        
        # Aguardar carregamento completo da p√°gina
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "segment"))
        )
        print("üìÑ P√°gina carregada com sucesso")

        # --- Selecionar segmento ---
        print("üîΩ Selecionando o segmento 'Setor de Atua√ß√£o'...")
        
        # Lidar com sobreposi√ß√µes usando m√∫ltiplas estrat√©gias
        def select_segment():
            try:
                # Tentar clique padr√£o
                segment_dropdown = WebDriverWait(driver, 30).until(
                    EC.element_to_be_clickable((By.ID, "segment"))
                )
                segment_dropdown.click()
                return True
            except ElementClickInterceptedException:
                # Usar clique via JavaScript como fallback
                print("‚ö†Ô∏è Clique padr√£o interceptado, usando clique JavaScript")
                driver.execute_script("arguments[0].click();", segment_dropdown)
                return True
            except Exception:
                return False
        
        # Mecanismo de repeti√ß√£o com tratamento de sobreposi√ß√µes
        max_retries = 3
        for attempt in range(max_retries):
            print(f"‚Üª Tentativa {attempt+1}/{max_retries} de selecionar segmento")
            if select_segment():
                break
            
            # Verificar se h√° sobreposi√ß√£o bloqueando
            try:
                overlay = driver.find_element(By.CLASS_NAME, 'backdrop')
                driver.execute_script("arguments[0].style.display = 'none';", overlay)
                print("üëã Sobreposi√ß√£o removida")
            except:
                pass
            time.sleep(2)
        else:
            raise TimeoutException("Falha ao selecionar segmento ap√≥s m√∫ltiplas tentativas")
        
        # Selecionar op√ß√£o espec√≠fica
        sector_option = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="segment"]/option[2]'))
        )
        sector_option.click()
        print("‚úÖ Segmento selecionado")
        time.sleep(3)  # Aguardar atualiza√ß√£o da p√°gina

        # --- Baixar arquivo ---
        print("üíæ Localizando e clicando no link de download...")
        download_link = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="divContainerIframeB3"]/div/div[1]/form/div[2]/div/div[2]/div/div/div[1]/div[2]/p/a'))
        )
        
        # Listar arquivos existentes antes do download
        existing_files = set(glob.glob(os.path.join(download_path, "*")))
        print(f"üìÇ Arquivos existentes: {len(existing_files)} arquivos")
        
        # Clicar no link de download
        download_link.click()
        print(f"‚¨áÔ∏è Download iniciado √†s {time.strftime('%H:%M:%S')}")
        start_time = time.time()

        # --- Aguardar conclus√£o do download ---
        print("‚è≥ Aguardando conclus√£o do download...")
        
        # Aguardar novo arquivo aparecer
        max_wait = 300  # Timeout de 5 minutos
        downloaded_file = None
        last_size = 0
        stable_count = 0
        
        while time.time() - start_time < max_wait:
            # Obter arquivos atuais e identificar novos
            current_files = set(glob.glob(os.path.join(download_path, "*")))
            new_files = current_files - existing_files
            
            # Verificar downloads parciais
            partial_files = [f for f in new_files if f.endswith('.crdownload')]
            completed_files = [f for f in new_files if not f.endswith('.crdownload')]
            
            # Se houver arquivos completos, verificar tamanho
            if completed_files:
                # Priorizar IBOVDia.csv se existir
                ibov_files = [f for f in completed_files if "IBOVDia" in f]
                if ibov_files:
                    candidate = ibov_files[0]
                else:
                    candidate = completed_files[0]
                
                current_size = os.path.getsize(candidate)
                
                # Verificar se o tamanho est√° est√°vel por 3 verifica√ß√µes consecutivas
                if current_size > 0:
                    if current_size == last_size:
                        stable_count += 1
                        print(f"üìä Tamanho do arquivo est√°vel: {current_size} bytes ({stable_count}/3)")
                    else:
                        stable_count = 0
                        print(f"üìà Arquivo aumentando: {current_size} bytes")
                    
                    last_size = current_size
                    
                    # Se o tamanho n√£o mudar por 3 verifica√ß√µes, considerar download completo
                    if stable_count >= 3:
                        downloaded_file = candidate
                        print(f"‚úÖ Download completo! Tamanho final: {current_size} bytes")
                        break
                else:
                    print(f"‚ö†Ô∏è Arquivo encontrado mas vazio: {candidate}")
            
            # Se houver arquivos parciais, mostrar progresso
            if partial_files:
                partial_file = partial_files[0]
                try:
                    size = os.path.getsize(partial_file)
                    print(f"‚è±Ô∏è Download parcial: {size} bytes")
                except:
                    print("‚è±Ô∏è Download parcial em progresso")
            
            # Se ainda n√£o houver arquivos, mostrar status de espera
            elif not new_files:
                elapsed = int(time.time() - start_time)
                print(f"üïí Aguardando in√≠cio do download... ({elapsed}s)")
            
            time.sleep(2)
        else:
            # Verifica√ß√£o final ap√≥s timeout
            current_files = set(glob.glob(os.path.join(download_path, "*")))
            new_files = current_files - existing_files
            completed_files = [f for f in new_files if not f.endswith('.crdownload')]
            
            if completed_files:
                candidate = completed_files[0]
                if os.path.getsize(candidate) > 0:
                    downloaded_file = candidate
                    print(f"‚úÖ Arquivo baixado ap√≥s timeout: {candidate}")
                else:
                    raise Exception(f"Arquivo baixado est√° vazio: {candidate}")
            else:
                raise Exception(f"Timeout de download ap√≥s {max_wait} segundos - Nenhum arquivo baixado")
        
        # --- Converter para Parquet ---
        print("\nüß™ Iniciando convers√£o para Parquet...")
        parquet_path = downloaded_file.replace('.csv', '.parquet')
        
        try:
            # Corrigir problema de formata√ß√£o do CSV
            # Usar engine python e ignorar erros de formata√ß√£o
            df = pd.read_csv(
                downloaded_file, 
                sep=';', 
                encoding='latin-1', 
                decimal=',',
                engine='python',
                on_bad_lines='skip'  # Ignorar linhas com problemas de formata√ß√£o
            )
            
            # Verificar se o DataFrame foi carregado corretamente
            if df.empty:
                raise ValueError("DataFrame vazio ap√≥s leitura do CSV")
                
            print(f"üìä CSV carregado com sucesso: {df.shape[0]} linhas, {df.shape[1]} colunas")
            
            # Salvar como Parquet
            df.to_parquet(parquet_path)
            print(f"üíæ Arquivo Parquet salvo: {parquet_path}")
            
            # Compara√ß√£o de tamanhos
            csv_size = os.path.getsize(downloaded_file) / 1024 / 1024
            parquet_size = os.path.getsize(parquet_path) / 1024 / 1024
            print(f"üì¶ Compara√ß√£o de tamanhos: CSV={csv_size:.2f} MB ‚Üí Parquet={parquet_size:.2f} MB")
            
            # Remover CSV original ap√≥s convers√£o (opcional)
            # os.remove(downloaded_file)
            # print(f"üóëÔ∏è CSV original removido")
            
            return downloaded_file, parquet_path
            
        except Exception as e:
            print(f"‚ùå Falha na convers√£o: {str(e)}")
            return downloaded_file, None

    except Exception as e:
        print(f"‚ùå Ocorreu um erro: {str(e)}")
        driver.save_screenshot("error_screenshot.png")
        print("üì∏ Captura de tela salva como 'error_screenshot.png'")
        return None, None
    finally:
        driver.quit()
        print(f"üö™ WebDriver fechado √†s {time.strftime('%H:%M:%S')}")


if __name__ == "__main__":
    csv_path, parquet_path = download_file_colab_fixed()

    if csv_path and parquet_path:
        print("\nüéâ Processo conclu√≠do com sucesso!")
        print(f"Caminho do CSV: {csv_path}")
        print(f"Caminho do Parquet: {parquet_path}")
    elif csv_path:
        print("\n‚ö†Ô∏è CSV baixado mas convers√£o falhou")
        print(f"Caminho do CSV: {csv_path}")
    else:
        print("\n‚ùå Processo falhou")
